/**
 * 강둑에 서 있는 개구리


작은 개구리는 강 건너편에 가고 싶어합니다.
개구리는 처음에 강의 한 강둑(위치 0)에 있으며 반대편 강둑(위치 X+1)에 도달하려고 합니다.
나뭇잎이 나무에서 강 표면으로 떨어집니다.

낙엽을 나타내는 N개의 정수로 구성된 배열 A가 주어집니다.
A[K]는 초 단위로 측정된 시간 K에서 하나의 잎이 떨어지는 위치를 나타냅니다.

목표는 개구리가 강 건너편으로 점프할 수 있는 가장 빠른 시간을 찾는 것입니다.
개구리는 1에서 X까지 강 건너 모든 위치에 잎이 나타날 때만 건너갈 수 있습니다
(즉, 1에서 X까지 모든 위치가 잎으로 덮이는 가장 빠른 순간을 찾고 싶습니다).
강의 흐름 속도는 무시할 정도로 작다고 가정할 수 있습니다. 즉, 나뭇잎이 강에 떨어지면 위치가 바뀌지 않습니다.

예를 들어 다음과 같은 정수 X = 5와 배열 A가 주어집니다.

  A[0] = 1
  A[1] = 3
  A[2] = 1
  A[3] = 4
  A[4] = 2
  A[5] = 3
  A[6] = 5
  A[7] = 4
두 번째 6에서 리프는 위치 5로 떨어집니다. 이것은 리프가 강 건너 모든 위치에 나타나는 가장 빠른 시간입니다.


주의사항
배열 참조는 생각보다 느리다.
별도 카운트를 체크하는 변수를 두는 게 더 효율이 좋다.
 */

function solution(leafs, x) {
  let time = -1;
  let position = []; // 목표값으로 배열을 만듬.
  let count = 0;
  for (let i = 0; i < leafs.length; i++) {
    const p = leafs[i];

    if (p <= x && !position[p - 1]) {
      position[p - 1] = p;
      count++;
      if (count === x) {
        time = i;
        break;
      }
    }
  }
  console.log("time", time, leafs.length, position.length, x);
  return time;
}

solution(
  [
    1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 12, 14, 15, 15, 15, 15, 15, 18,
    16
  ],
  16
);
